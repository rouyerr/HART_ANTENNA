#include <AccelStepper.h>
#define dirPin1 6
#define stepPin1 7
#define dirPin2 8
#define stepPin2 9
#define interface 1

AccelStepper stepper1=AccelStepper(interface,stepPin1,dirPin1);
AccelStepper stepper2=AccelStepper(interface,stepPin2,dirPin2);

//Example for now, but this will be GPS location of antenna
float ref_lat = 44.56744; 
float ref_lon = 123.27447; 
float ref_alt = 0; 

#define DEG_TO_RAD 0.017453292519943295769236907684886
#define EARTH_RADIUS 6371000 // in meters 

//Will be read-in rocket coordinates, just test for now
//1:Dixon 2:Downward 3: Fred Meyer
float lat_test[3] = {44.56365, 44.56892, 44.57463};// Example latitude for testing
float lon_test[3] = {123.27847, 123.27779, 123.27442}; // Example longitude for testing
float alt_test[3] = {400, 900, 400}; // Example altitude for testing

void llaToEnu(float lat, float lon, float alt, float& east, float& north, float& up) {
    float delta_lat = lat - ref_lat;
    float delta_lon = lon - ref_lon;

    float cos_ref_lat = cos(ref_lat * DEG_TO_RAD);

    east = -delta_lon * DEG_TO_RAD * EARTH_RADIUS * cos_ref_lat;
    north = delta_lat * DEG_TO_RAD * EARTH_RADIUS;
    up = alt - ref_alt;

}

float east, north, up;

// Constants for steps per revolution and speed of stepper motors
#define STEPS_PER_REVOLUTION 400
#define PI 3.1415926535897932384626433832795
#define TWO_PI 6.283185307179586476925286766559
#define HALF_PI 1.5707963267948966192313216916398

//PHI_MIN CHANGE 1:
//Define desired starting phi offset (in degrees)
float offset = 45;
float phi_i_offset = offset*DEG_TO_RAD;
//Introduce boolean 'above45yet' to track
boolean above45yet = 0;

// Original Antenna Orientation Vector 
float xop = 0;
float yop = 1;
float zop = 0;

//_____SET OLD PHI INITIALLY WITH STARTING ANGLE_____
//(NOW PHI DEFINED AS DIFFERENCE FROM INITIAL 45 POSITION)
float old_phi = 0;

//Variabe to track last position (previous loop's theta absolute)
float old_theta = 0;

//declare theta_abs (Global theta position based off of the set origin vector <1 0 0>
float theta_abs;

// Function to calculate magnitude of a vector
float mag(float vector[]) {
  return sqrt(pow(vector[0], 2) + pow(vector[1], 2));
}

//-------One rotation variable---------
boolean onerot = true; 

void setup() {
  Serial.begin(9600);
  Serial.println("INITIALIZING");
  // Set stepper motor speeds
  stepper1.setSpeed(500);
  stepper1.setMaxSpeed(20000); //20000 steps/second max
  stepper1.setAcceleration(2000); 
  stepper2.setSpeed(500);
  stepper2.setMaxSpeed(20000); //20000 steps/second max
  stepper2.setAcceleration(2000); 
  
  //Start off at offset
  Serial.println("Start steps calculated and moving stepper motor...");
  //float start_steps = offset/360*STEPS_PER_REVOLUTION;
  //Serial.println(start_steps);
  //stepper2.move(start_steps);
  //stepper2.runToPosition();

  delay(2000);
  Serial.println("BEGIN LOOP-------------------------->");
}

void loop() {
while(onerot) {
for (int i = 0; i <3;i++) {
 llaToEnu(lat_test[i], lon_test[i], alt_test[i], east, north, up);
 Serial.print("East " );
 Serial.print(east);
 Serial.print("  North ");
 Serial.print(north);
 Serial.print("  up ");
 Serial.println(up);
 
    // Rocket Coordinates
    float yr = north;
    float xr = east;
    float zr = up;
    
    // Components of Vector That Points at Rocket
    float dx = xr;
    float dy = yr;
    float dz = zr;

    //------ THETA CALC ------
    
    // xy component of original antenna direction
    float xy_op[] = { xop, yop };
    // xy component of required pointing vector
    float dxy[] = { dx, dy };

    //PHI_MIN CHANGE 3: Set minimum z coordinate associated with PHI_MIN
    //float z_min = mag(dxy)*tan(phi_i_offset);
    //Print current rocket angle for testing
    //float rocket_angle = (atan((dz)/(mag(dxy))))/(DEG_TO_RAD);
    //Serial.print("Rocket Angle ");
    //Serial.println(rocket_angle);

    //PHI_MIN CHANGE 4: If conditions
    //Only continue once dz > zmin (Rocket above 45 deg angle)
    //if (dz > z_min) {
      //above45yet = 1;
   // }
    //Put everything left in 'if' statement>>>
  //  if (above45yet == 1) {
   // Serial.println("Above 45");
    //Now start actual rocket tracking code:

    
    // Solve for angle between them
    float theta = acos((xy_op[0] * dxy[0] + xy_op[1] * dxy[1]) / (mag(xy_op) * mag(dxy)));
    
    //Inverse cos can only give angle between 0 and 180,have to account for the positive x half of xy plane using dx indicator and adjusting:
    //ADJUST FOLLOWING CONDITION FOR MOTOR SIGN CONVENTION -- CW+: dx<0   CCW: dx>0
    if (dx < 0) {
      theta_abs = TWO_PI - theta;
      Serial.println("dx<0");
    } else {
      theta_abs = theta;
      Serial.println("dx>0");
    }
    Serial.print("theta_abs: ");
    Serial.println(degrees(theta_abs));
    //OPTIMIZATION FOR THETA (Finds fastest route):
    //Theta_dif will be the actual movement angle for the horizontal motor
    float theta_dif = theta_abs - old_theta;
   Serial.print("theta_dif: ");
   Serial.println(degrees(theta_dif));
    if ((abs(theta_dif)) > PI) {
      Serial.println("Optimizing Theta...");
      if (theta_dif < 0) {
        theta_dif = theta_dif + TWO_PI;
      } else {
        theta_dif = theta_dif - TWO_PI;
      }
      Serial.print("Optimized theta_dif: ");
      Serial.println(degrees(theta_dif));

    }

    
    //------ PHI CALC ------
    // Solve for phi using arctan with mag(dxy) as horizontal triangle leg and dz as vertical leg
    // Motor oritentaion: Add negative in front of phi calc if raising antenna is CCW for vertical motor
    float phi = -atan((dz)/(mag(dxy)));

    //Relative to 45 degree starting point
    //If phi is negative>>
    //phi = phi + phi_i_offset
    //If phi is positive>>
    //phi = phi - phi_I_offset
    
    Serial.print("Phi_abs: ");
    Serial.println(degrees(phi));
    
    //***90 degree max for vertical motor here:
    if (abs(phi) > HALF_PI) {
      phi = PI - abs(phi);
      Serial.print("Phi (V2): ");
      Serial.println(degrees(phi));
    }
    
    //Calculate how much phi should change from previous phi
     float phi_dif = phi - old_phi;
    
    //Update old position to be used for next loop as calculated theta from this loop
    old_theta = theta_abs;
    old_phi = phi;
    Serial.print("Phi_dif: ");
    Serial.println(degrees(phi_dif));
    
    //Convert angle to motor step instruction
    int MOTOR1_steps = (theta_dif / TWO_PI * STEPS_PER_REVOLUTION);
    Serial.print("Motor 1 (Horizontal) Steps: ");
    Serial.println(MOTOR1_steps);
    int MOTOR2_steps = (phi_dif / TWO_PI * STEPS_PER_REVOLUTION);
    Serial.print("Motor 2 (Vertical) Steps: ");
    Serial.println(MOTOR2_steps);
    
    // Move stepper motors based on calculated angles
       stepper1.move(MOTOR1_steps);
       stepper1.runToPosition();
       stepper2.move(MOTOR2_steps);
       stepper2.runToPosition();
       delay(1000);  // Adjust delay as needed
    onerot = false;
    }
}
}
